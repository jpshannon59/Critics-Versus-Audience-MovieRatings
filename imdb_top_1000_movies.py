# -*- coding: utf-8 -*-
"""IMDB Top 1000 Movies

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Aaj7NeGIG_fDLUirICB8u4ej-tKzCNIf


import pandas
import os 
import seaborn as sns 
import matplotlib.pyplot as plt
df = pandas.read_csv("sample_data/imdb_top_1000.csv")
df.set_index("Series_Title", drop=False)
df.head(10)

print("number of rows", len(df))
df.columns

print("Number of missing values for each column.")
df.isnull().sum()

for col in df.columns:
  print("Descriptive statistics for", col)
  print(df[col].describe())
  print("\n\n")

plt.figure(figsize=(10,5))
sns.set(font_scale = 1.2)

chart = sns.catplot( x='Meta_score',
             kind="count", 
             height=8, 
             aspect=1.5, 
             data=df)
chart.set_xticklabels(rotation=90)

plt.figure(figsize=(10,5))
sns.set(font_scale = 0.8)

chart = sns.catplot( x='Released_Year',
             kind="count", 
             height=8, 
             aspect=1.5, 
             data=df, order=sorted(set(df['Released_Year'])))
chart.set_xticklabels(rotation=90)

mean_scores = df.groupby("Released_Year")['Meta_score'].agg("mean")
plt.figure(figsize=(20,7))
sns.set(font_scale = 1.17)
chart = sns.barplot(mean_scores.index, mean_scores.values)
plt.xticks(rotation=90)

df["Gross_int"] = df["Gross"].str.replace(",", "").astype(float)
total_gross = df.groupby("Released_Year")['Gross_int'].agg("sum")
plt.figure(figsize=(20,7))
sns.set(font_scale = 1.17)
chart = sns.barplot(total_gross.index, total_gross.values)
plt.xticks(rotation=90)

df["Runtime_minutes"] = df["Runtime"].str.replace("min", "").astype(int)
avg_length = df.groupby("Released_Year")['Runtime_minutes'].agg("mean")
plt.figure(figsize=(20,7))
sns.set(font_scale = 1.17)
chart = sns.barplot(avg_length.index, avg_length.values)
plt.xticks(rotation=90)

df.plot.scatter(x = "IMDB_Rating", y = "Meta_score")

sns.scatterplot(data=df.iloc[0:100], x="IMDB_Rating", y="Meta_score", hue = "Gross_int")

df["Popular Versus Expert"] = (df["IMDB_Rating"] * 10) - df["Meta_score"] 
# df.nlargest(10, "Popular Versus Expert")
df[ ["Series_Title", "Popular Versus Expert", "Gross", "Released_Year"] ].nlargest(20, "Popular Versus Expert")

df[ ["Series_Title", "Popular Versus Expert", "Gross", "Released_Year"] ].nsmallest(20, "Popular Versus Expert")

#Fixing the row with ReleasedYear == PG
df["Released_Year"] = pandas.to_numeric(df["Released_Year"], errors = "coerce") #any invalid value will turn to NaN
plt.figure(figsize=(13,7))
df2000_2010 = df[(df["Released_Year"]>= 2000) & (df["Released_Year"]<= 2010) ]
sns.scatterplot(data=df2000_2010, x="IMDB_Rating", y="Meta_score", hue="Runtime_minutes")

df.columns
print(df.Gross_int)

